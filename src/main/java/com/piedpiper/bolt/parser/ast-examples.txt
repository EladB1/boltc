
1 * 2 + 3

        +
     /    \
    *      3
   / \
  1   2


4 * (2 + 3) - 1

        -
     /    \
    *      1
   / \
  4   +
     /  \
    2    3

2 + 2 < 3 || 3 - 2 == 1
          ||
       /       \
      <         ==
    /  \       /  \
   +     3     -    1
 /  \   / \
2   2   3   2


string str = someValue

      =
    /   \
   str  someValue
   /
string


const x = y ** 2
       
       =
    /     \
   x       **
  /       /  \
const    y     2

const Array<int> arr[3] = {1, 2, 3}

                  =
            /          \
           arr         elements
         /    \         /  |  \
    Array       index   1   2   3
    /    \        |
  const  int      3

const mut Array<int> arr[3] = {1, 2, 3}

                  =
            /          \
           arr         elements
         /    \         /  |  \
     Array       index   1   2   3
    /   |  \        |
  const mut  int    3

arr[3][0]
           arr
        /       \
       index   index
         |       |
         3       0

fn test(int i, int j): int {
    return i * j
}
                    fn
               /      |       \
            test    params     int
            /      /    |
        body       i    j
          |        |     \
         return   int   int
          |
          *
        /   \
       i     j

fn sample(int x, int y=2): int {
    return (x + y) * 4
}

              fn
        /     |     \
    sample   params  int
     |       /    \
    body    x     =
     |      |    / \
    return  int  y  2
      |          |
      *          int
    /    \
   +      4
  / \
x    y

prompt()
        call
         |
        prompt

prompt(user_input)
  
          call
        /      \
     prompt    params
                  |
                user_input

prompt(user_input, context)

            call
        /         \
     prompt       params
                /       \
        user_input      context


if (x < 5) { return false } else if (x % 2 == 0) { return true }

                  branch
             /              \    
           if               else if
         /   \              /     \
       <      body         ==     body
     /   \      |         /  \      |
    x     5     return    %    0    return
                  |      / \         |
                  false  x  2       true

while (true) {doSomething()}

        loop
      /     \
    true    body
               \
              call
                \
                doSomething

for (i = 0; i < len; i++) {arr[i]++}

               loop
        /     |    \         \
      =       <     unary     body
    /  \    /  \      /  \      |
   i    0   i   len  i    ++  unary
                             |   \ 
                            arr  ++
                            |
                        index
                         |
                         i
                               

for (float flt : floats) {print(-1 * flt)}
                loop
            /         \
           :          body
        /     \         |
       flt    floats    call
      /                /   \
     float          print   params
                              |
                              *
                            /   \
                        unary     flt
                        /  \
                       -    1

x === y ? 0 : 1

       ternary
    /     |     \
  ===     0      1
  / \
 x   y